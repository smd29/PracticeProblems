class BSTNode:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

    def add_child(self, data):

        # the value already exists
        if data == self.data:
            return

        if data < self.data:
            # add data in left sub-tree
            if self.left:  # if NOT a leaf node
                self.left.add_child(data)
            else:
                self.left = BSTNode(data)

        elif data > self.data:
            # add data in right sub-tree
            if self.right:  # if NOT a leaf node
                self.right.add_child(data)
            else:
                self.right = BSTNode(data)

    # build tree
    def build_tree(elements):
        print("Building tree with this elements: ", elements)
        root = BSTNode(elements[0])
        for i in range(1, len(elements)):
            root.add_child(elements[i])
        return root

    def inorder_traversal(self):
        #left --> root --> right
        elements = []

        if self.left:
            elements += self.left.inorder_traversal()

        elements.append(self.data)

        if self.right:
            elements += self.right.inorder_traversal()

        return elements

if __name__ == '__main__':
    countries = ["India", "Pakistan", "Germany", "USA", "China", "India", "UK", "USA"]
    country_tree = BSTNode.build_tree(countries)

    number_tree = BSTNode.build_tree([17, 4, 1, 20, 9, 23, 18, 34])
    print("In-Order Traversal: ", number_tree.inorder_traversal())

class BSTNode:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

    def add_child(self, data):

        # the value already exists
        if data == self.data:
            return

        if data < self.data:
            # add data in left sub-tree
            if self.left:  # if NOT a leaf node
                self.left.add_child(data)
            else:
                self.left = BSTNode(data)

        elif data > self.data:
            # add data in right sub-tree
            if self.right:  # if NOT a leaf node
                self.right.add_child(data)
            else:
                self.right = BSTNode(data)

    # build tree
    def build_tree(elements):
        print("Building tree with this elements: ", elements)
        root = BSTNode(elements[0])
        for i in range(1, len(elements)):
            root.add_child(elements[i])
        return root

    def inorder_traversal(self):
        #left --> root --> right
        elements = []

        if self.left:
            elements += self.left.inorder_traversal()

        elements.append(self.data)

        if self.right:
            elements += self.right.inorder_traversal()

        return elements

    def preorder_traversal(self):
        #root --> left --> right
        elements = []
        elements.append(self.data)

        if self.left:
            elements += self.left.inorder_traversal()

        if self.right:
            elements += self.right.inorder_traversal()

        return elements

    def postorder_traversal(self):
        #left --> right --> root
        elements = []

        if self.left:
            elements += self.left.inorder_traversal()

        if self.right:
            elements += self.right.inorder_traversal()

        elements.append(self.data)

        return elements

    def search_element(self,val):
        if self.data == val:
            return True

        if val < self.data:
            if self.left:
                return self.left.search_element(val)
            else:
                return False

        if val > self.data:
            if self.right:
                return self.right.search(val)
            else:
                return False


    def find_min(self):
        #minimum element will be in the left subtree
        if self.left is None:
            return self.data
        return self.left.find_min()

    def find_max(self):
        #max element will be in the right subtree
        if self.right is None:
            return self.data
        return self.right.find_max()

    def calculate_sum(self):
        left_sum = self.left.calculate_sum() if self.left else 0
        right_sum = self.right.calculate_sum() if self.right else 0
        return self.data + left_sum + right_sum

    def delete(self,val):
        if val < self.data:
            if self.left:
                self.left.delete(val)
        elif val > self.data:
            if self.right:
                self.right.delete(val)
        else:
            #leaf node
            if self.left is None and self.right is None:
                return None
            if self.left is None:
                return self.right
            if self.right is None:
                return self.left

            min_val = self.right.find_min()
            self.data = min_val
            self.right = self.right.delete(min_val)

        return self
if __name__ == '__main__':
    countries = ["India", "Pakistan", "Germany", "USA", "China", "India", "UK", "USA"]
    country_tree = BSTNode.build_tree(countries)

    #in-order traversal
    number_tree = BSTNode.build_tree([17, 4, 1, 20, 9, 23, 18, 34])
    print("In-Order Traversal: ", number_tree.inorder_traversal())

    #pre-order traversal
    print("Pre-Order Traversal: ", number_tree.preorder_traversal())

    #post-order traversal
    print("Post-Order Traversal: ", number_tree.postorder_traversal())

    #search
    print("does India exists in the list? \n --> ",country_tree.search_element("India"))
    print("does Australia exists in the list? \n --> ", country_tree.search_element("Australia"))


    #min max
    print("Minimum element in the tree is: ",number_tree.find_min())
    print("Maximum element in the tree is: ", number_tree.find_max())

    #sum
    print("Sum of all the elements is: ",number_tree.calculate_sum())

    #delete
    number_tree.delete(17)
    print("After deleting 17 ", number_tree.inorder_traversal())
